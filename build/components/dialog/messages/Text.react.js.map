{"version":3,"sources":["../../../../src/components/dialog/messages/Text.react.js"],"names":["youtubeRegEx","processText","text","processedText","test","matches","exec","length","width","giphyRegEx","console","log","renderMarkdown","replace","__html","Text","render","props","className","propTypes","string","isRequired"],"mappings":";;;;AAIA;;;;AACA;;;;AAEA;;;;;;;;+eAPA;;;;AASA,IAAIA,eAAe,4FAAnB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIC,gBAAgBD,IAApB;;AAEA;AACA,MAAGF,aAAaI,IAAb,CAAkBD,aAAlB,CAAH,EAAqC;AACnC,QAAIE,UAAUL,aAAaM,IAAb,CAAkBJ,IAAlB,CAAd;AACA,QAAGG,WAAWA,QAAQE,MAAR,IAAkB,CAAhC,EAAmC;AACjC,aAAO,0CAAQ,KAAK,mCAAmCF,QAAQ,CAAR,CAAhD,EAA4D,OAAO,EAACG,OAAO,KAAR,EAAnE,EAAmF,aAAY,GAA/F,EAAmG,qBAAnG,GAAP;AACD;AACF;;AAED,MAAIC,aAAa,wCAAjB;;AAEA;AACA,MAAGA,WAAWL,IAAX,CAAgBD,aAAhB,CAAH,EAAmC;AACjC,QAAIE,UAAUI,WAAWH,IAAX,CAAgBJ,IAAhB,CAAd;AACA,QAAGG,WAAWA,QAAQE,MAAR,IAAkB,CAAhC,EAAmC;AACjCG,cAAQC,GAAR,CAAY,iBAAZ;AACA,aAAO,0CAAQ,KAAK,uBAAuBN,QAAQ,CAAR,CAApC,EAAgD,OAAM,KAAtD,EAA4D,QAAO,KAAnE,EAAyE,aAAY,GAArF,EAAyF,SAAM,aAA/F,EAA6G,qBAA7G,GAAP;AACD;AACF;;AAGDF,kBAAgB,sBAAYS,cAAZ,CAA2BT,aAA3B,CAAhB;AACAA,kBAAgB,kCAAiBA,aAAjB,CAAhB;AACAA,kBAAgBA,cAAcU,OAAd,CAAsB,yBAAtB,EAAiD,0CAAjD,CAAhB;;AAEA,SAAO,uCAAK,WAAU,MAAf,EAAsB,yBAAyB,EAAEC,QAAQX,aAAV,EAA/C,GAAP;AACD;;IAEKY,I;;;;;;;;;iBAMJC,M,qBAAS;AAAA,iBACqB,KAAKC,KAD1B;AAAA,QACCf,IADD,UACCA,IADD;AAAA,QACOgB,SADP,UACOA,SADP;;;AAGP,WACE;AAAA;AAAA,QAAK,WAAWA,SAAhB;AACGjB,kBAAYC,IAAZ;AADH,KADF;AAKD,G;;;;;AAdGa,I,CACGI,S,GAAY;AACjBjB,QAAM,iBAAUkB,MAAV,CAAiBC,UADN;AAEjBH,aAAW,iBAAUE;AAFJ,C;kBAgBNL,I","file":"Text.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport ActorClient from '../../../utils/ActorClient';\n\nimport { processEmojiText } from '../../../utils/EmojiUtils';\n\nvar youtubeRegEx = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/ ]{11})/i;\n\nfunction processText(text) {\n  let processedText = text;\n\n  // youtube\n  if(youtubeRegEx.test(processedText)) {\n    var matches = youtubeRegEx.exec(text);\n    if(matches && matches.length == 2) {\n      return <iframe src={\"https://www.youtube.com/embed/\" + matches[1]} style={{width: \"70%\"}} frameBorder=\"0\" allowfullscreen></iframe>\n    }\n  }\n\n  var giphyRegEx = /(gph.is\\/)(.*)|(giphy.com\\/gifs\\/)(.*)/\n\n  // giphy\n  if(giphyRegEx.test(processedText)) {\n    var matches = giphyRegEx.exec(text);\n    if(matches && matches.length == 2) {\n      console.log(\"giphy match hit\");\n      return <iframe src={\"//giphy.com/embed/\" + matches[1]} width=\"480\" height=\"301\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n    }\n  }\n  \n\n  processedText = ActorClient.renderMarkdown(processedText);\n  processedText = processEmojiText(processedText);\n  processedText = processedText.replace(/(@[0-9a-zA-Z_]{5,32})/ig, '<span class=\"message__mention\">$1</span>');\n\n  return <div className=\"text\" dangerouslySetInnerHTML={{ __html: processedText }}/>;\n}\n\nclass Text extends Component {\n  static propTypes = {\n    text: PropTypes.string.isRequired,\n    className: PropTypes.string\n  };\n\n  render() {\n    const { text, className } = this.props;\n\n    return (\n      <div className={className}>\n        {processText(text)}\n      </div>\n    );\n  }\n}\n\nexport default Text;\n"]}